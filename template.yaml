AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
   
Globals:
    Function:
        Timeout: 15


Parameters:
        ServiceSubDomainName:
            Type: String
            Default: 'www'

        RootUrl:
            Type: String
            Default: '{{resolve:ssm:/account/root-url:1}}'

        SslCert: 
            Type: String
            Default: '{{resolve:ssm:/account/ssl-cert:1}}'
        
        RootSslCert: 
            Type: String
            Default: '{{resolve:ssm:/account/root-ssl-cert:1}}'
        
        HostedZoneId: 
            Type: String
            Default: '{{resolve:ssm:/account/hosted-zone-id:1}}'
        
        SkillName:
            Type: String
            Default: 'SellerDigital'

        BucketName:
            Type: String
            Default: ''
        
        Environment:
            Type: String
            Default: 'acceptance'

Conditions: 
      Acceptance: !Equals [ !Ref Environment, 'acceptance' ]

Resources: 

    ServiceApi:
        Type: AWS::Serverless::Api
        Properties:
            Name: ServiceApi
            StageName: 'Prod'
            Cors:
                AllowMethods: "'*'"
                AllowHeaders: "'*'"
                AllowOrigin: "'*'"

    APIDomainName:
        Type: AWS::ApiGateway::DomainName
        Properties:
          SecurityPolicy: TLS_1_2
          CertificateArn: !Ref SslCert
          DomainName: !Join [ '', [ !Ref ServiceSubDomainName,'.', !Ref RootUrl ] ]
        #   EndpointConfiguration:
        #     Types: ['REGIONAL']
    
    RootAPIDomainName:
        Type: AWS::ApiGateway::DomainName
        Properties:
          SecurityPolicy: TLS_1_2
          CertificateArn: !Ref RootSslCert
          DomainName: !Join [ '', [  !Ref RootUrl ] ]

    RootAPIBasePathMapping:
        Type: AWS::ApiGateway::BasePathMapping
        DependsOn: RootAPIDomainName
        Properties:
            Stage: !Ref ServiceApi.Stage
            DomainName: !Ref RootAPIDomainName
            RestApiId: !Ref ServiceApi

    RootAPIDomain:
        DependsOn: RootAPIDomainName
        Type: 'AWS::Route53::RecordSetGroup'
        Properties:
            HostedZoneName:
                Fn::Join: [ '', [ Ref: RootUrl, '.' ] ]
            RecordSets:
            - Name: 
                Ref: RootUrl
              Type: A
              AliasTarget:
                DNSName:
                    Fn::GetAtt: [RootAPIDomainName, DistributionDomainName]
                HostedZoneId:
                    Fn::GetAtt: [RootAPIDomainName, DistributionHostedZoneId]


    APIBasePathMapping:
        Type: AWS::ApiGateway::BasePathMapping
        DependsOn: APIDomainName
        Properties:
            Stage: !Ref ServiceApi.Stage
            DomainName: !Ref APIDomainName
            RestApiId: !Ref ServiceApi
    

    APIDomain:
        Type: 'AWS::Route53::RecordSetGroup'
        Properties:
            HostedZoneName:
                Fn::Join: [ '', [ Ref: RootUrl, '.' ] ]
            RecordSets:
            - Name: 
                Ref: APIDomainName
              Type: A
              AliasTarget:
                DNSName:
                    Fn::GetAtt: [APIDomainName, DistributionDomainName]
                HostedZoneId:
                    Fn::GetAtt: [APIDomainName, DistributionHostedZoneId]
    
    RootStaticAssetsBucket:
        Type: AWS::S3::Bucket
        Properties:
            BucketName: !Ref RootUrl
            WebsiteConfiguration:
                RedirectAllRequestsTo:
                    HostName: !Ref RootUrl
                    Protocol: https
    
    StaticAssetsBucket:
        Type: AWS::S3::Bucket
        Properties:
            BucketName: 
                Fn::Join: [ '', [ Ref: ServiceSubDomainName, '.',Ref: RootUrl] ]
            WebsiteConfiguration:
                RedirectAllRequestsTo:
                    HostName: 
                        Fn::Join: [ '', [ Ref: ServiceSubDomainName, '.',Ref: RootUrl] ]
    
    UiLambdaFunction:
            Type: AWS::Serverless::Function
            Properties:
                MemorySize: 3008
                Description: Serves microfrontend and shell html container
                CodeUri: ui/
                Handler: ui.lambda_handler
                Runtime: nodejs10.x
                Tracing: Active
                Environment:
                    Variables:
                        RootUrl: !Ref RootUrl
                Events:
                    Get:
                        Type: Api
                        Properties:
                            Path: /
                            RestApiId: !Ref ServiceApi
                            Method: GET
                            # Auth:
                            #     Authorizer: CognitoAuthorizer
                            
    ServiceApiFunction:
        Type: AWS::Serverless::Function
        Properties:
            MemorySize: 3008
            CodeUri: service/
            Handler: service.lambda_handler
            Runtime: nodejs10.x
            Tracing: Active
            Environment:
                Variables:
                    RootUrl: !Ref RootUrl
            # Policies:
            # - Statement:
            #     [{
            #       "Effect": "Allow",
            #       "Action": ["es:*","lambda:*","apigateway:*","s3:*","dynamodb:*"],
            #       "Resource": "*"
            #     }]
            Events:
                ApiGets:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ServiceApi
                        Path: /{resource}/{method}
                        Method: get
                        # Auth:
                            #     Authorizer: CognitoAuthorizer
                ApiPosts:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ServiceApi
                        Path: /{resource}/{method}
                        Method: post
                        # Auth:
                            #     Authorizer: CognitoAuthorizer
                ApiOptions:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ServiceApi
                        Path: /{resource}/{method}
                        Method: options
                        # Auth:
                            #     Authorizer: CognitoAuthorizer

                        
Outputs:
    APIDomainName:
        Description: "Api Domain Name"
        Value: !Ref APIDomainName
    
    RootAPIDomainName:
        Description: "Root Api Domain Name"
        Value: !Ref RootAPIDomainName
    
    ApiUrl:
        Description: The API URL
        Value: !Sub "https://${ServiceApi}.execute-api.${AWS::Region}.amazonaws.com/"